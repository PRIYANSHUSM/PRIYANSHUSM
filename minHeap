class MinHeap:
    def __init__(self):
        self.heap = []
        
    def _parent(self,i):
        return (i-1)//2
        
    def _left(self,i):
        return 2 * i + 1
        
    def _right(self,i):
        return 2 * i + 2
        
    def push(self,val):
        self.heap.append(val)
        self._heapify_up(len(self.heap)-1)
        
    def pop(self):
        if not self.heap:
            return None
        if len(self.heap) == 1:
            return self.heap.pop()
            
        root = self.heap[0]
        self.heap[0] = self.heap.pop()
        self._heapify_down(0)
        return root
        
    def _heapify_up(self,i):
        while i>0 and self.heap[self._parent(i)]>self.heap[i]:
            self.heap[self._parent(i)],self.heap[i]= self.heap[i],self.heap[self._parent(i)]
            i = self._parent(i)
            
    def _heapify_down(self,i):
        smallest = i
        left, right = self._left(i),self._right(i)
        
        if left<len(self.heap) and self.heap[left] < self.heap[smallest]:
            smallest = left
        if right < len(self.heap) and self.heap[right]<self.heap[smallest]:
            smallest = right
            
        if smallest != i:
            self.heap[smallest],self.heap[i] = self.heap[i],self.heap[smallest]
            self._heapify_down(smallest)
            
            
h = MinHeap()
h.push(10)
h.push(5)
h.push(20)
# h.push(30)

h.pop()




print(h.heap)
